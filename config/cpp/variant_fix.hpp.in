/**
 *  @file eagine/stdfix/variable.hpp
 *
 *  Copyright Matus Chochlik.
 *  Distributed under the Boost Software License, Version 1.0.
 *  See accompanying file LICENSE_1_0.txt or copy at
 *   http://www.boost.org/LICENSE_1_0.txt
 */
#ifndef EAGINE_STDFIX_VARIANT_1509260923_HPP
#define EAGINE_STDFIX_VARIANT_1509260923_HPP

#include <type_traits>
#include <stdexcept>
#include <cassert>

namespace std {

class bad_variant_access
 : public logic_error
{
public:
	bad_variant_access(void)
	 : logic_error("Bad variant access")
	{ }
};

struct monostate { };

constexpr inline
bool operator != (monostate, monostate)
noexcept { return false; }

constexpr inline
bool operator == (monostate, monostate)
noexcept { return true; }

constexpr inline
bool operator <  (monostate, monostate)
noexcept { return false; }

constexpr inline
bool operator <= (monostate, monostate)
noexcept { return true; }

constexpr inline
bool operator >  (monostate, monostate)
noexcept { return false; }

constexpr inline
bool operator >= (monostate, monostate)
noexcept { return true; }

template <typename ... T>
class variant
{
private:
};

} // namespace std

#endif // include guard
